--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: key, !options[:match].nil?
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Compute a cache key and yield it to the given block It is used by the #expire_page, #expire_action and #expire methods."
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Parameters
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "options<String, Hash>:"
    body: The key or the Hash that will be used to build the key
  - !ruby/struct:SM::Flow::LI 
    label: "controller<String>:"
    body: The name of the controller
  - !ruby/struct:SM::Flow::LI 
    label: "controller_based<Boolean>:"
    body: only used by action and page caching
  type: :NOTE
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Options (options)
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: ":key<String>:"
    body: The complete or partial key that will be computed.
  - !ruby/struct:SM::Flow::LI 
    label: ":action<String>:"
    body: The action name that will be used to compute the key
  - !ruby/struct:SM::Flow::LI 
    label: ":controller<String>:"
    body: The controller name that will be part of the key
  - !ruby/struct:SM::Flow::LI 
    label: ":params<Array[String]>:"
    body: The params will be joined together (with '/') and added to the key
  - !ruby/struct:SM::Flow::LI 
    label: ":match<Boolean, String>:"
    body: true, it will try to match multiple cache entries string, shortcut for {:key =&gt; &quot;mykey&quot;, :match =&gt; true}
  type: :NOTE
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Examples
- !ruby/struct:SM::Flow::VERB 
  body: "  expire(:key =&gt; &quot;root_key&quot;, :params =&gt; [session[:me], params[:id]])\n  expire(:match =&gt; &quot;root_key&quot;)\n  expire_action(:action =&gt; 'list')\n  expire_page(:action =&gt; 'show', :controller =&gt; 'news')\n"
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Returns
- !ruby/struct:SM::Flow::P 
  body: The result of the given block
full_name: Merb::Cache#expire_key_for
is_singleton: false
name: expire_key_for
params: (options, controller, controller_based = false) {|key, !options[:match].nil?| ...}
visibility: public
