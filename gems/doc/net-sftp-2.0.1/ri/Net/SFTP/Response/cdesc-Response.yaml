--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: The numeric code, one of the FX_* constants
  name: code
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: The numeric code, one of the FX_* constants
  name: code
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A hash of request-specific data, such as a file handle or attribute information
  name: data
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A hash of request-specific data, such as a file handle or attribute information
  name: data
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: The textual message for this response (possibly blank)
  name: message
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: The textual message for this response (possibly blank)
  name: message
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: The request object that this object is in response to
  name: request
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: The request object that this object is in response to
  name: request
  rw: R
class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: Encapsulates a response from the remote server, to a specific client request. Response objects are passed as parameters to callbacks when you are performing asynchronous operations; when you call Net::SFTP::Request#wait, you can get the corresponding response object via Net::SFTP::Request#response.
- !ruby/struct:SM::Flow::VERB 
  body: "  sftp.open(&quot;/path/to/file&quot;) do |response|\n    p response.ok?\n    p response[:handle]\n  end\n\n  sftp.loop\n"
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: MAP
  value: constants.inject({}) do |memo, name|       next memo unless name =~ /^FX_(.*)/
- !ruby/object:RI::Constant 
  comment: 
  name: MAP
  value: constants.inject({}) do |memo, name|       next memo unless name =~ /^FX_(.*)/
full_name: Net::SFTP::Response
includes: 
- !ruby/object:RI::IncludedModule 
  name: Net::SFTP::Constants::StatusCodes
- !ruby/object:RI::IncludedModule 
  name: Net::SFTP::Constants::StatusCodes
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: "[]"
- !ruby/object:RI::MethodSummary 
  name: "[]"
- !ruby/object:RI::MethodSummary 
  name: eof?
- !ruby/object:RI::MethodSummary 
  name: eof?
- !ruby/object:RI::MethodSummary 
  name: ok?
- !ruby/object:RI::MethodSummary 
  name: ok?
- !ruby/object:RI::MethodSummary 
  name: to_s
- !ruby/object:RI::MethodSummary 
  name: to_s
- !ruby/object:RI::MethodSummary 
  name: to_str
- !ruby/object:RI::MethodSummary 
  name: to_str
name: Response
superclass: Object
