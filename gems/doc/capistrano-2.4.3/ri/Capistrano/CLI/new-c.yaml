--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Create a new CLI instance using the given array of command-line parameters to initialize it. By default, <tt>ARGV</tt> is used, but you can specify a different set of parameters (such as when embedded cap in a program):"
- !ruby/struct:SM::Flow::VERB 
  body: "  require 'capistrano/cli'\n  Capistrano::CLI.parse(%w(-vvvv -r config/deploy update_code)).execute!\n"
- !ruby/struct:SM::Flow::P 
  body: "Note that you can also embed cap directly by creating a new Configuration instance and setting it up, but you'll often wind up duplicating logic defined in the CLI class. The above snippet, redone using the Configuration class directly, would look like:"
- !ruby/struct:SM::Flow::VERB 
  body: "  require 'capistrano'\n  require 'capistrano/cli'\n  config = Capistrano::Configuration.new\n  config.logger_level = Capistrano::Logger::TRACE\n  config.set(:password) { Capistrano::CLI.password_prompt }\n  config.load &quot;config/deploy&quot;\n  config.update_code\n"
- !ruby/struct:SM::Flow::P 
  body: There may be times that you want/need the additional control offered by manipulating the Configuration directly, but generally interfacing with the CLI class is recommended.
full_name: Capistrano::CLI::new
is_singleton: true
name: new
params: (args)
visibility: public
